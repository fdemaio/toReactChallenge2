{"ast":null,"code":"var _jsxFileName = \"/Users/fernandodemaio/Documents/GitHub/toReactChallenge2/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useRef } from 'react';\nimport { v4 as uuidv4 } from \"uuid\";\nimport { ToDoList } from './components/ToDoList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const [listaToDo, setListaToDo] = useState([{\n    id: uuidv4(),\n    task: \"tarea de prueba\",\n    status: false\n  }]);\n  const [validate, setValidate] = useState('default');\n  const toDoTaskRef = useRef();\n\n  const toggleToDo = id => {\n    const newToDos = [...listaToDo];\n    const toDo = newToDos.find(toDo => toDo.id === id);\n    toDo.status = !toDo.status;\n    setListaToDo(newToDos);\n  };\n\n  const handleToDoAdd = () => {\n    const task = toDoTaskRef.current.value;\n\n    if (task === '') {\n      setValidate('error');\n    } else {\n      setListaToDo(prevToDo => {\n        return [...prevToDo, {\n          id: uuidv4(),\n          task,\n          status: false\n        }];\n      });\n      toDoTaskRef.current.value = null;\n      setValidate('success');\n    }\n\n    setTimeout(() => {\n      setValidate('default');\n    }, 1500);\n  };\n\n  const handleClearDone = () => {\n    const newListaToDo = listaToDo.filter(todo => !todo.status);\n    setListaToDo(newListaToDo);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ToDoList, {\n      listaToDo: listaToDo,\n      toggleToDo: toggleToDo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: validate,\n      ref: toDoTaskRef,\n      type: \"text\",\n      placeholder: \"Nueva Tarea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleToDoAdd,\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClearDone,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Tareas restantes: \", listaToDo.filter(todo => !todo.status).length, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"4+L5kSvgV4TNaSK3x8VW4d6pj/4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/fernandodemaio/Documents/GitHub/toReactChallenge2/src/App.jsx"],"names":["React","Fragment","useState","useRef","v4","uuidv4","ToDoList","App","listaToDo","setListaToDo","id","task","status","validate","setValidate","toDoTaskRef","toggleToDo","newToDos","toDo","find","handleToDoAdd","current","value","prevToDo","setTimeout","handleClearDone","newListaToDo","filter","todo","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,MAApC,QAAiD,OAAjD;AACA,SAAQC,EAAE,IAAIC,MAAd,QAA2B,MAA3B;AACA,SAASC,QAAT,QAAyB,uBAAzB;;AAEA,OAAO,SAASC,GAAT,GAAe;AAAA;;AAEpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,CAAC;AAACQ,IAAAA,EAAE,EAACL,MAAM,EAAV;AAAcM,IAAAA,IAAI,EAAC,iBAAnB;AAAsCC,IAAAA,MAAM,EAAE;AAA9C,GAAD,CAAD,CAA1C;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,SAAD,CAAxC;AAEA,QAAMa,WAAW,GAAGZ,MAAM,EAA1B;;AAEA,QAAMa,UAAU,GAAIN,EAAD,IAAQ;AACzB,UAAMO,QAAQ,GAAG,CAAC,GAAGT,SAAJ,CAAjB;AACA,UAAMU,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAeD,IAAD,IAAUA,IAAI,CAACR,EAAL,KAAUA,EAAlC,CAAb;AACAQ,IAAAA,IAAI,CAACN,MAAL,GAAc,CAACM,IAAI,CAACN,MAApB;AAEAH,IAAAA,YAAY,CAACQ,QAAD,CAAZ;AACD,GAND;;AAQA,QAAMG,aAAa,GAAG,MAAM;AAC1B,UAAMT,IAAI,GAAGI,WAAW,CAACM,OAAZ,CAAoBC,KAAjC;;AACA,QAAGX,IAAI,KAAI,EAAX,EAAc;AACZG,MAAAA,WAAW,CAAC,OAAD,CAAX;AACD,KAFD,MAGI;AACFL,MAAAA,YAAY,CAAEc,QAAD,IAAa;AACxB,eAAO,CAAC,GAAGA,QAAJ,EAAc;AAACb,UAAAA,EAAE,EAACL,MAAM,EAAV;AAAcM,UAAAA,IAAd;AAAoBC,UAAAA,MAAM,EAAC;AAA3B,SAAd,CAAP;AAED,OAHW,CAAZ;AAIAG,MAAAA,WAAW,CAACM,OAAZ,CAAoBC,KAApB,GAA4B,IAA5B;AACAR,MAAAA,WAAW,CAAC,SAAD,CAAX;AACD;;AAEDU,IAAAA,UAAU,CAAC,MAAI;AACbV,MAAAA,WAAW,CAAC,SAAD,CAAX;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAjBD;;AAmBA,QAAMW,eAAe,GAAG,MAAM;AAC5B,UAAMC,YAAY,GAAGlB,SAAS,CAACmB,MAAV,CAAkBC,IAAD,IAAS,CAACA,IAAI,CAAChB,MAAhC,CAArB;AACAH,IAAAA,YAAY,CAACiB,YAAD,CAAZ;AACD,GAHD;;AAKA,sBACI,QAAC,QAAD;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,SAAS,EAAElB,SAArB;AAAgC,MAAA,UAAU,EAAEQ;AAA5C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,SAAS,EAAEH,QADb;AAEE,MAAA,GAAG,EAAEE,WAFP;AAGE,MAAA,IAAI,EAAC,MAHP;AAIE,MAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAQ,MAAA,OAAO,EAAEK,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAUE;AAAQ,MAAA,OAAO,EAAEK,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAcE;AAAA,uCAAwBjB,SAAS,CAACmB,MAAV,CAAkBC,IAAD,IAAS,CAACA,IAAI,CAAChB,MAAhC,EAAwCiB,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAkBD;;GA1DetB,G;;KAAAA,G","sourcesContent":["import React, { Fragment, useState, useRef} from 'react';\nimport {v4 as uuidv4} from \"uuid\";\nimport { ToDoList } from './components/ToDoList';\n\nexport function App() {\n\n  const [listaToDo, setListaToDo] = useState([{id:uuidv4(), task:\"tarea de prueba\", status: false}]);\n\n  const [validate, setValidate] = useState('default');\n  \n  const toDoTaskRef = useRef();\n  \n  const toggleToDo = (id) => {\n    const newToDos = [...listaToDo];\n    const toDo = newToDos.find((toDo) => toDo.id===id);\n    toDo.status = !toDo.status;\n\n    setListaToDo(newToDos);\n  }\n\n  const handleToDoAdd = () => {\n    const task = toDoTaskRef.current.value;\n    if(task ===''){ \n      setValidate('error')\n    }\n    else{    \n      setListaToDo((prevToDo) =>{ \n        return [...prevToDo, {id:uuidv4(), task, status:false}];\n        \n      });\n      toDoTaskRef.current.value = null;\n      setValidate('success')\n    }\n\n    setTimeout(()=>{\n      setValidate('default');\n    }, 1500 );\n  }\n\n  const handleClearDone = () => {\n    const newListaToDo = listaToDo.filter((todo) =>!todo.status);\n    setListaToDo(newListaToDo); \n  }\n\n  return (\n      <Fragment>\n        <ToDoList listaToDo={listaToDo} toggleToDo={toggleToDo}/>\n        <input \n          className={validate} \n          ref={toDoTaskRef} \n          type=\"text\" \n          placeholder=\"Nueva Tarea\" />\n        <button onClick={handleToDoAdd}>\n          +\n        </button>\n        <button onClick={handleClearDone} >\n          -\n        </button>\n\n        <div>Tareas restantes: {listaToDo.filter((todo) =>!todo.status).length } </div>\n      </Fragment>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}